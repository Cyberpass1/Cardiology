/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Consultas;

import Clases.EnlaceBd;
import Clases.ExportarExcelApp;
import Clases.JCambiarState;
import Clases.PdfDAO1;
import Clases.PdfVO;
import Clases.Tabla_PdfVO;
import Clases.Temporal;
import Clases.Validar;
import Clases.imgTabla;
import Menu.Mprincipal;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.ExceptionConverter;
import com.itextpdf.text.Font;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Desktop;
import java.awt.Image;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.FormatStyle;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Properties;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.activation.DataHandler;
import javax.activation.FileDataSource;
import javax.mail.BodyPart;
import javax.mail.Message;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.ss.usermodel.BorderStyle;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.ClientAnchor;
import org.apache.poi.ss.usermodel.CreationHelper;
import org.apache.poi.ss.usermodel.Drawing;
import org.apache.poi.ss.usermodel.FillPatternType;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.usermodel.Picture;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.util.CellRangeAddress;
import org.apache.poi.util.IOUtils;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.data.general.DefaultPieDataset;

/**
 *
 * 
 */
public class ConsultaLaboratorio extends javax.swing.JInternalFrame {

    Tabla_PdfVO tpdf = new Tabla_PdfVO();
    String ruta_archivo = "";
    int id = -1;

    public ConsultaLaboratorio() {
        initComponents();
               ((javax.swing.plaf.basic.BasicInternalFrameUI)this.getUI()).setNorthPane(null);
    
   informacionpdf();           
   JRpaciente.setSelected(true);
   String P="Paciente";
   JRpaciente.equals(P);
   jTextField1.setText("V-");
   
   
         String Nivel=Tempo.getNivel();
   
         if(Nivel.equals("Administrador") || Nivel.equals("Lcdo. Bioanalista")){Autorizar.setEnabled(true); Cancelar.setEnabled(true);}
      
         
         
         Calendar Fecha = new GregorianCalendar();
         FechaOne.setCalendar(Fecha);
         FechaTwo.setCalendar(Fecha);
         visualizar_PdfVO(Jtabla);
        
         if(Jtabla.getRowCount()>0){  acomodarceldas(); }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        State = new javax.swing.JPopupMenu();
        Autorizar = new javax.swing.JMenuItem();
        Completar = new javax.swing.JMenuItem();
        Cancelar = new javax.swing.JMenuItem();
        Correo = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jRcodigo = new javax.swing.JRadioButton();
        JRpaciente = new javax.swing.JRadioButton();
        jRusuario = new javax.swing.JRadioButton();
        FechaTwo = new com.toedter.calendar.JDateChooser();
        FechaOne = new com.toedter.calendar.JDateChooser();
        jLabel4 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Jtabla = new javax.swing.JTable();

        Autorizar.setActionCommand("Autorizar");
        Autorizar.setEnabled(false);
        Autorizar.setLabel("Autorizar");
        Autorizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AutorizarActionPerformed(evt);
            }
        });
        State.add(Autorizar);

        Completar.setLabel("Completar");
        Completar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CompletarActionPerformed(evt);
            }
        });
        State.add(Completar);

        Cancelar.setText("Cancelar");
        Cancelar.setEnabled(false);
        Cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelarActionPerformed(evt);
            }
        });
        State.add(Cancelar);

        Correo.setText("Enviar por correo");
        Correo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CorreoActionPerformed(evt);
            }
        });
        State.add(Correo);

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(null);
        setMinimumSize(new java.awt.Dimension(1285, 663));
        setPreferredSize(new java.awt.Dimension(1292, 683));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(0, 0, 51));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1300, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 60, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(-6, 620, 1300, 60));

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel3.setBackground(new java.awt.Color(0, 0, 51));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Arial Narrow", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Exportar Tabla");
        jPanel3.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1090, 10, -1, -1));

        jLabel2.setFont(new java.awt.Font("Arial Narrow", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("C O N S U L T A S          L A B O R A T O R I O");
        jPanel3.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 0, -1, -1));

        jLabel3.setFont(new java.awt.Font("Arial Narrow", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Buscar por:");
        jPanel3.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        jPanel4.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1290, 30));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTextField1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField1KeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField1KeyTyped(evt);
            }
        });
        jPanel2.add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 230, 50));

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Logos/grafica.png"))); // NOI18N
        jButton1.setContentAreaFilled(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1010, 40, 70, 50));

        jRcodigo.setBackground(new java.awt.Color(255, 255, 255));
        jRcodigo.setText("Código");
        jRcodigo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRcodigoActionPerformed(evt);
            }
        });
        jPanel2.add(jRcodigo, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 20, -1, -1));

        JRpaciente.setBackground(new java.awt.Color(255, 255, 255));
        JRpaciente.setText("Paciente");
        JRpaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JRpacienteActionPerformed(evt);
            }
        });
        jPanel2.add(JRpaciente, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, -1, -1));

        jRusuario.setBackground(new java.awt.Color(255, 255, 255));
        jRusuario.setText("Usuario");
        jRusuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRusuarioActionPerformed(evt);
            }
        });
        jPanel2.add(jRusuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 20, -1, -1));

        FechaTwo.setBackground(new java.awt.Color(255, 255, 255));
        FechaTwo.setToolTipText("");
        FechaTwo.setDateFormatString("yyyy-MM-dd");
        FechaTwo.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jPanel2.add(FechaTwo, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 50, 170, 50));

        FechaOne.setBackground(new java.awt.Color(255, 255, 255));
        FechaOne.setToolTipText("");
        FechaOne.setDateFormatString("yyyy-MM-dd");
        FechaOne.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jPanel2.add(FechaOne, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 50, 170, 50));

        jLabel4.setText("Sortear por rango de fechas");
        jPanel2.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 20, -1, -1));

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Logos/adobe_pdf_document_14979.png"))); // NOI18N
        jButton2.setContentAreaFilled(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1190, 40, 70, 50));

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Logos/Excel_2013_23480.png"))); // NOI18N
        jButton3.setContentAreaFilled(false);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(1100, 40, 70, 50));

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ImgBotones/magnifier-1_icon-icons.com_56924.png"))); // NOI18N
        jButton4.setContentAreaFilled(false);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 50, 70, 50));

        jPanel4.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 30, 1290, 110));

        Jtabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Examen", "Paciente", "Atendido por", "Fecha", "Archivo", "Correo"
            }
        ));
        Jtabla.setComponentPopupMenu(State);
        Jtabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JtablaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(Jtabla);
        if (Jtabla.getColumnModel().getColumnCount() > 0) {
            Jtabla.getColumnModel().getColumn(0).setResizable(false);
            Jtabla.getColumnModel().getColumn(1).setResizable(false);
            Jtabla.getColumnModel().getColumn(2).setResizable(false);
            Jtabla.getColumnModel().getColumn(3).setResizable(false);
            Jtabla.getColumnModel().getColumn(4).setResizable(false);
            Jtabla.getColumnModel().getColumn(5).setResizable(false);
        }

        jPanel4.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 150, 1290, 460));

        getContentPane().add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1300, 610));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    int idtabla;
    String idestados, opcion, nombrepaciente;
    private void JtablaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JtablaMouseClicked






        String Nivel=Tempo.getNivel();
        int column = Jtabla.getColumnModel().getColumnIndexAtX(evt.getX());
        int row = evt.getY() / Jtabla.getRowHeight();
        // activa_boton(false, true, true);
        // txtname.setEnabled(true);
        int fila = Jtabla.getSelectedRow();
        idtabla=(int) (Jtabla.getValueAt(fila, 0));
        nombrepaciente= (Jtabla.getValueAt(fila, 2).toString());
        idestados= (Jtabla.getValueAt(fila, 6).toString());
        correopaciente= (Jtabla.getValueAt(fila, 7).toString());
        
     
       
       
       
       
       
       
       
       
       
       
       
       
        
        if (row < Jtabla.getRowCount() && row >= 0 && column < Jtabla.getColumnCount() && column >= 0) {
            id = (int) Jtabla.getValueAt(row, 0);
            Object value = Jtabla.getValueAt(row, column);
            
            if (value instanceof JButton) {
                ((JButton) value).doClick();
                JButton boton = (JButton) value;

                if (boton.getText().equals("Vacio")) {
                    JOptionPane.showMessageDialog(null, "No hay archivo");
                } 
                else if (Nivel.equals("Aux. Laboratorio") && idestados.equals("Pendiente")) {JOptionPane.showMessageDialog(null,"El archivo debe autorizarse para que lo puedas visualizar", "PERMISOS", 1);}
                
                
                else {
                    PdfDAO1 pd = new PdfDAO1();
                    pd.ejecutar_archivoPDF(id);
                    try {
                        JOptionPane.showMessageDialog(null,"Abriendo reporte...","Reporte",1);
                        Desktop.getDesktop().open(new File("new.pdf"));
                    } catch (Exception ex) {JOptionPane.showMessageDialog(null,ex);
                    }
                }

            } else { }
            
            
            
            
            
         
           
        }
        
        
        
        
        
    }//GEN-LAST:event_JtablaMouseClicked

    private void JRpacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JRpacienteActionPerformed
        this.JRpaciente.setSelected(true);
        jRusuario.setSelected(false);
        jRcodigo.setSelected(false);
        jTextField1.setText("V-");
        
    }//GEN-LAST:event_JRpacienteActionPerformed

    private void jRusuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRusuarioActionPerformed
      
        this.jRusuario.setSelected(true);
        JRpaciente.setSelected(false);
        jRcodigo.setSelected(false);
        jTextField1.setText("");
        
    }//GEN-LAST:event_jRusuarioActionPerformed

    private void jRcodigoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRcodigoActionPerformed
        this.jRcodigo.setSelected(true);
        JRpaciente.setSelected(false);
        jRusuario.setSelected(false);
        jTextField1.setText("");
    }//GEN-LAST:event_jRcodigoActionPerformed

    

    private void jTextField1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyReleased
         
    
 
      
     if(JRpaciente.isSelected()){     Searchbyname();  acomodarceldas(); }
     else if(jRusuario.isSelected()){     SearchbyUser();   acomodarceldas();}
     else if(jRcodigo.isSelected()){     SearchbyCod();   acomodarceldas();}
        
        
       
       
    }//GEN-LAST:event_jTextField1KeyReleased

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
       SearchBetweenDates(); 
       if(Jtabla.getRowCount()>0){  acomodarceldas(); }
        
       
 
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       try{      
       if(Jtabla.getRowCount()<=0){  JOptionPane.showMessageDialog(null, "La tabla se encuentra vacia", "TABLA VACIA", JOptionPane.ERROR_MESSAGE); }
       else{     grafico();  }
             
          
            
            
            
            

        }  catch(Exception e){  JOptionPane.showMessageDialog(null,"Error", "Reporte Grafico", JOptionPane.ERROR_MESSAGE); System.out.println(e);}
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        
       if(Jtabla.getRowCount()<=0){  JOptionPane.showMessageDialog(null, "La tabla se encuentra vacia", "TABLA VACIA", JOptionPane.ERROR_MESSAGE); }
       else{ pdf(); AuditoriaReporte();}
       
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        
            if(Jtabla.getRowCount()<=0){  JOptionPane.showMessageDialog(null, "La tabla se encuentra vacia", "TABLA VACIA", JOptionPane.ERROR_MESSAGE); }
       else{   reporte();    AuditoriaReporte(); }
        
       
        
        
     
    }//GEN-LAST:event_jButton3ActionPerformed

    private void AutorizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AutorizarActionPerformed
          int fila = Jtabla.getSelectedRow();
        if (fila == -1) {
            JOptionPane.showMessageDialog(this, "Debe selecionar una Fila");
        } else {
      

            
            if (idestados.equals("Autorizado")){ JOptionPane.showMessageDialog(null, "Este informe ya se encuentra : Autorizado", "Estado", JOptionPane.WARNING_MESSAGE);}
            
            else if (setState.Revisar(107,      idtabla ) ) {

                JOptionPane.showMessageDialog(null, "El estado del estudio se ha actualizado a : Autorizado");
                 limpiarTablaEstudios();
                 visualizar_PdfVO(Jtabla);
                 acomodarceldas();
                 AuditoriaAutorizar();

            }
          
        }
    }//GEN-LAST:event_AutorizarActionPerformed

    private void CompletarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CompletarActionPerformed
          int fila = Jtabla.getSelectedRow();
        if (fila == -1) {
            JOptionPane.showMessageDialog(this, "Debe selecionar una Fila");
        } else {
      
          if (idestados.equals("Completado")){ JOptionPane.showMessageDialog(null, "Este informe ya se encuentra : Completado", "Estado", JOptionPane.WARNING_MESSAGE);}
          else if (idestados.equals("Pendiente")){ JOptionPane.showMessageDialog(null, "El informe debe autorizarse antes de completarse", "Estado", JOptionPane.ERROR_MESSAGE);}
          else if (setState.Revisar(103,      idtabla )) {

                JOptionPane.showMessageDialog(null, "El estado del estudio se ha actualizado a : Completado");
                 limpiarTablaEstudios();
                 visualizar_PdfVO(Jtabla);
                 acomodarceldas();
                 AuditoriaCompletar();
            }
        }
    }//GEN-LAST:event_CompletarActionPerformed

    private void CancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelarActionPerformed

        if (JOptionPane.showConfirmDialog(rootPane, "¿Desea realmente cancelar este estudio?",
            "CANCELAR ESTUDIO", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION)  {
         
            
            
            
            
        int fila = Jtabla.getSelectedRow();
        if (fila == -1) {
            JOptionPane.showMessageDialog(this, "Debe selecionar una Fila");
        } else {
      
          if (idestados.equals("Cancelado")){ JOptionPane.showMessageDialog(null, "Este informe ya se encuentra : Cancelado", "Estado", JOptionPane.WARNING_MESSAGE);}
          else if (setState.Revisar(104,      idtabla )) {

                JOptionPane.showMessageDialog(null, "El estado del estudio se ha actualizado a : Cancelado");
                 limpiarTablaEstudios();
                 visualizar_PdfVO(Jtabla);
                 acomodarceldas();
                 AuditoriaCancelar();

            }
        }
            
            
            
            
            
            
            
            
            
         }
         
    }//GEN-LAST:event_CancelarActionPerformed

    private void CorreoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CorreoActionPerformed
             int fila = Jtabla.getSelectedRow();
        if (fila == -1) {
            JOptionPane.showMessageDialog(this, "Debe selecionar una Fila");
        } else {
      

            

            if (idestados.equals("Pendiente")){ JOptionPane.showMessageDialog(null, "El informe debe autorizarse antes de ser enviado por correo", "Estado", JOptionPane.ERROR_MESSAGE);}
            else if (idestados.equals("Cancelado")){ JOptionPane.showMessageDialog(null, "Este informe fue cancelado", "Estado", JOptionPane.ERROR_MESSAGE);}
            
            else if (setState.Revisar(103,      idtabla ) ) {

             
                 limpiarTablaEstudios();
                 visualizar_PdfVO(Jtabla);
                 acomodarceldas();
                 
                 
                    PdfDAO1 pd = new PdfDAO1();
                    pd.correo_archivoPDF(id);
                /*    try {
                        JOptionPane.showMessageDialog(null,"Abriendo reporte...","Reporte",1);
                        Desktop.getDesktop().open(new File("correo.pdf"));
                    } catch (Exception ex) {JOptionPane.showMessageDialog(null,ex);
                    }*/
                 
                 email2();

            }
          
        }
    }//GEN-LAST:event_CorreoActionPerformed

    private void jTextField1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1KeyTyped

     
    
    
    
   
      public void visualizar_PdfVO(JTable tabla) {
        
        
        try {
        
        
        tabla.setDefaultRenderer(Object.class, new imgTabla());
        DefaultTableModel dt = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        
 
        
        dt.addColumn("Código");
        dt.addColumn("Examen");
        dt.addColumn("Paciente");
        dt.addColumn("Usuario encargado");
        dt.addColumn("Fecha");
        dt.addColumn("archivopdf");
        dt.addColumn("Estado");
        dt.addColumn("Correo");
        
        ImageIcon icono = null;
        if (get_Image("/Logos/32pdf.png") != null) {
            icono = new ImageIcon(get_Image("/Logos/32pdf.png"));
        }

       
        PdfVO vo = new PdfVO();
        ArrayList<PdfVO> list = Listar_PdfVO();

        if (list.size() > 0) {
            for (int i = 0; i < list.size(); i++) {
                Object fila[] = new Object[10];
                vo = list.get(i);
                fila[0] = vo.getCodigopdf();
                fila[1] = vo.getExamen();
                fila[2] = vo.getCedulapaciente();
                fila[3] = vo.getUsuario();
                fila[4] = vo.getFecha();
                
                
                
                
                
                if (vo.getArchivopdf() != null) {
                    fila[5] = new JButton(icono);
                } else {
                    fila[5] = new JButton("Vacio");
                }

                
                        fila[6] = vo.getState();
                        fila[7] = vo.getCorreo();
                
                dt.addRow(fila);
            }
            tabla.setModel(dt);
            tabla.setRowHeight(32);
        }
        
   
                

        
        
                 } catch (Exception e) { System.out.println(e + "visualizarpdf") ;
        }
        
        
        
        
        
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
     
      public void SearchBetweenDates(){
              
   try {
        
        
        Jtabla.setDefaultRenderer(Object.class, new imgTabla());
        DefaultTableModel dt = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        
 
        
        dt.addColumn("Código");
        dt.addColumn("Examen");
        dt.addColumn("Paciente");
        dt.addColumn("Usuario encargado");
        dt.addColumn("Fecha");
        dt.addColumn("archivopdf");
        dt.addColumn("Estado");
        dt.addColumn("Correo");
        
        ImageIcon icono = null;
        if (get_Image("/Logos/32pdf.png") != null) {
            icono = new ImageIcon(get_Image("/Logos/32pdf.png"));
        }


        PdfVO vo = new PdfVO();
        ArrayList<PdfVO> list =ListarBetween_PdfVO();
limpiarTablaEstudios();
        if (list.size() > 0) {
            for (int i = 0; i < list.size(); i++) {
                Object fila[] = new Object[10];
                vo = list.get(i);
                fila[0] = vo.getCodigopdf();
                fila[1] = vo.getExamen();
                fila[2] = vo.getCedulapaciente();
                fila[3] = vo.getUsuario();
                fila[4] = vo.getFecha();
                
                if (vo.getArchivopdf() != null) {
                    fila[5] = new JButton(icono);
                } else {
                    fila[5] = new JButton("Vacio");
                }
               fila[6] = vo.getState();
               fila[7] = vo.getCorreo();
               
                dt.addRow(fila);
            }
            Jtabla.setModel(dt);
            Jtabla.setRowHeight(32);
        }
        
                 } catch (Exception e) { System.out.println(e);
        }


  }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
       
      public void Searchbyname(){
              
   try {
        
        
        Jtabla.setDefaultRenderer(Object.class, new imgTabla());
        DefaultTableModel dt = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        
 
        
        dt.addColumn("Código");
        dt.addColumn("Examen");
        dt.addColumn("Paciente");
        dt.addColumn("Usuario encargado");
        dt.addColumn("Fecha");
        dt.addColumn("archivopdf");
        dt.addColumn("Estado");
        dt.addColumn("Correo");
        
        ImageIcon icono = null;
        if (get_Image("/Logos/32pdf.png") != null) {
            icono = new ImageIcon(get_Image("/Logos/32pdf.png"));
        }


        PdfVO vo = new PdfVO();
        ArrayList<PdfVO> list = Listarbyced_PdfVO();
limpiarTablaEstudios();
        if (list.size() > 0) {
            for (int i = 0; i < list.size(); i++) {
                Object fila[] = new Object[10];
                vo = list.get(i);
                fila[0] = vo.getCodigopdf();
                fila[1] = vo.getExamen();
                fila[2] = vo.getCedulapaciente();
                fila[3] = vo.getUsuario();
                fila[4] = vo.getFecha();
                
                if (vo.getArchivopdf() != null) {
                    fila[5] = new JButton(icono);
                } else {
                    fila[5] = new JButton("Vacio");
                }
               fila[6] = vo.getState();
               fila[7] = vo.getCorreo();
                dt.addRow(fila);
            }
            Jtabla.setModel(dt);
            Jtabla.setRowHeight(32);
        }
        
                 } catch (Exception e) { System.out.println(e);
        }


  }
    
    
      
      public void SearchbyUser(){
              
   try {
        
        
        Jtabla.setDefaultRenderer(Object.class, new imgTabla());
        DefaultTableModel dt = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        
 
        
        dt.addColumn("Código");
        dt.addColumn("Examen");
        dt.addColumn("Paciente");
        dt.addColumn("Usuario encargado");
        dt.addColumn("Fecha");
        dt.addColumn("archivopdf");
        dt.addColumn("Estado");
        dt.addColumn("Correo");
        
        ImageIcon icono = null;
        if (get_Image("/Logos/32pdf.png") != null) {
            icono = new ImageIcon(get_Image("/Logos/32pdf.png"));
        }


        PdfVO vo = new PdfVO();
        ArrayList<PdfVO> list = ListarbyUser_PdfVO();
limpiarTablaEstudios();
        if (list.size() > 0) {
            for (int i = 0; i < list.size(); i++) {
                Object fila[] = new Object[10];
                vo = list.get(i);
                fila[0] = vo.getCodigopdf();
                fila[1] = vo.getExamen();
                fila[2] = vo.getCedulapaciente();
                fila[3] = vo.getUsuario();
                fila[4] = vo.getFecha();
                
                if (vo.getArchivopdf() != null) {
                    fila[5] = new JButton(icono);
                } else {
                    fila[5] = new JButton("Vacio");
                }
                
                fila[6] = vo.getState();
                fila[7] = vo.getCorreo();
                
                dt.addRow(fila);
            }
            Jtabla.setModel(dt);
            Jtabla.setRowHeight(32);
        }
        
                 } catch (Exception e) { System.out.println(e);
        }


  }
    
    
      
      
        
      public void SearchbyCod(){
              
   try {
        
        
        Jtabla.setDefaultRenderer(Object.class, new imgTabla());
        DefaultTableModel dt = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        
 
        
        dt.addColumn("Código");
        dt.addColumn("Examen");
        dt.addColumn("Paciente");
        dt.addColumn("Usuario encargado");
        dt.addColumn("Fecha");
        dt.addColumn("archivopdf");
        dt.addColumn("Estado");
        dt.addColumn("Correo");
              
        ImageIcon icono = null;
        if (get_Image("/Logos/32pdf.png") != null) {
            icono = new ImageIcon(get_Image("/Logos/32pdf.png"));
        }


        PdfVO vo = new PdfVO();
        ArrayList<PdfVO> list = ListarbyCode_PdfVO();
limpiarTablaEstudios();
        if (list.size() > 0) {
            for (int i = 0; i < list.size(); i++) {
                Object fila[] = new Object[10];
                vo = list.get(i);
                fila[0] = vo.getCodigopdf();
                fila[1] = vo.getExamen();
                fila[2] = vo.getCedulapaciente();
                fila[3] = vo.getUsuario();
                fila[4] = vo.getFecha();
                
                if (vo.getArchivopdf() != null) {
                    fila[5] = new JButton(icono);
                } else {
                    fila[5] = new JButton("Vacio");
                }
                 fila[6] = vo.getState();
                 fila[7] = vo.getCorreo();
                 
                dt.addRow(fila);
            }
            Jtabla.setModel(dt);
            Jtabla.setRowHeight(32);
        }
        
                 } catch (Exception e) { System.out.println(e);
        }


  }
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
    
            void limpiarTablaEstudios() {
        DefaultTableModel tb = (DefaultTableModel) Jtabla.getModel();
        int a = Jtabla.getRowCount()-1;
        for (int i = a; i >= 0; i--) {
            tb.removeRow(tb.getRowCount()-1);

        }
    }

    
    
    
   public Image get_Image(String ruta) {
        try {
            ImageIcon imageIcon = new ImageIcon(getClass().getResource(ruta));
            Image mainIcon = imageIcon.getImage();
            return mainIcon;
        } catch (Exception e) { System.out.println(e);
        }
        return null;
    }
    

    
    
      public ArrayList<PdfVO> Listar_PdfVO() {
           
 Connection con;
 EnlaceBd cn = new EnlaceBd();
 PreparedStatement ps=null;
 ResultSet rs=null;
        
 String fecha = new SimpleDateFormat("yyyy-MM-dd").format(FechaOne.getDate());
 String fecha2 = new SimpleDateFormat("yyyy-MM-dd").format(FechaTwo.getDate());
    
    
    
        ArrayList<PdfVO> list = new ArrayList<PdfVO>();
   
        String sql = "SELECT Codigopdf, Estudio, Cedula, Usuario, FechaReporte, Reportepdf, Estado, Correo \n" +
"FROM table_laboratorio u\n" +
"\n" +
"INNER JOIN table_estudios n\n" +
"ON u.Id_examen=n.IdEstudio\n" +
"\n" +
"INNER JOIN table_paciente c\n" +
"ON u.id_paciente=c.Idpaciente\n" +
"\n" +
"INNER JOIN table_estado l\n" +
"ON u.Id_Estado=l.IdEstado\n" +
"\n" +
"INNER JOIN table_usuario x\n" +
"ON u.Id_personal=x.IdPersonal WHERE FechaReporte BETWEEN " + '"' + fecha + '"' + "AND"  + '"' + fecha2 + '"' +"ORDER BY  Codigopdf ASC";
        
     
  
        try {
            
            con = cn.getConnection();
            ps = con.prepareStatement(sql);
            rs = ps.executeQuery();
            
            
            while (rs.next()) {
                PdfVO vo = new PdfVO();
                vo.setCodigopdf(rs.getInt(1));
                vo.setExamen(rs.getString(2));
                vo.setCedulapaciente(rs.getString(3));
                vo.setUsuario(rs.getString(4));
                vo.setFecha(rs.getString(5));
                vo.setArchivopdf(rs.getBytes(6));
                vo.setState(rs.getString(7));
                vo.setCorreo(rs.getString(8));
                list.add(vo);
            }
        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        } finally {
            try {
                ps.close();
                rs.close();
                cn.desconectar();
            } catch (Exception ex) { System.out.println(ex);
            }
        }
        return list;
    }


   
   
   
   
   
   
   
   
     
    public ArrayList<PdfVO> Listarbyced_PdfVO() {
       
         Connection con;
    EnlaceBd cn = new EnlaceBd();
    PreparedStatement ps=null;
    ResultSet rs=null;
        
        ArrayList<PdfVO> list = new ArrayList<PdfVO>();
   
        String sql = "SELECT Codigopdf, Estudio, Cedula, Usuario, FechaReporte, Reportepdf, Estado, Correo \n" +
"FROM table_laboratorio u\n" +
"\n" +
"INNER JOIN table_estudios n\n" +
"ON u.Id_examen=n.IdEstudio\n" +
"\n" +
"INNER JOIN table_paciente c\n" +
"ON u.id_paciente=c.Idpaciente\n" +
"\n" +
"INNER JOIN table_estado l\n" +
"ON u.Id_Estado=l.IdEstado\n" +
"\n" +
"INNER JOIN table_usuario x\n" +
"ON u.Id_personal=x.IdPersonal where Cedula LIKE '%" + jTextField1.getText() + "%' " +"ORDER BY  Codigopdf ASC";
   
        try {
            
            con = cn.getConnection();
            ps = con.prepareStatement(sql);
            rs = ps.executeQuery();
            
            
            while (rs.next()) {
                PdfVO vo = new PdfVO();
                vo.setCodigopdf(rs.getInt(1));
                vo.setExamen(rs.getString(2));
                vo.setCedulapaciente(rs.getString(3));
                vo.setUsuario(rs.getString(4));
                vo.setFecha(rs.getString(5));
                vo.setArchivopdf(rs.getBytes(6));
                vo.setState(rs.getString(7));
                vo.setCorreo(rs.getString(8));
                list.add(vo);
            }
        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        } finally {
            try {
                ps.close();
                rs.close();
                cn.desconectar();
            } catch (Exception ex) { System.out.println(ex);
            }
        }
        return list;
    }
    
    
    
    
     
    public ArrayList<PdfVO> ListarbyUser_PdfVO() {
       
         Connection con;
    EnlaceBd cn = new EnlaceBd();
    PreparedStatement ps=null;
    ResultSet rs=null;
        
        ArrayList<PdfVO> list = new ArrayList<PdfVO>();
   
        String sql = "SELECT Codigopdf, Estudio, Cedula, Usuario, FechaReporte, Reportepdf, Estado, Correo \n" +
"FROM table_laboratorio u\n" +
"\n" +
"INNER JOIN table_estudios n\n" +
"ON u.Id_examen=n.IdEstudio\n" +
"\n" +
"INNER JOIN table_paciente c\n" +
"ON u.id_paciente=c.Idpaciente\n" +
"\n" +
"INNER JOIN table_estado l\n" +
"ON u.Id_Estado=l.IdEstado\n" +
"\n" +
         
"INNER JOIN table_usuario x\n" +
"ON u.Id_personal=x.IdPersonal where Usuario LIKE '%" + jTextField1.getText() + "%' " +"ORDER BY  Codigopdf ASC";
   
        try {
            
            con = cn.getConnection();
            ps = con.prepareStatement(sql);
            rs = ps.executeQuery();
            
            
            while (rs.next()) {
                PdfVO vo = new PdfVO();
                vo.setCodigopdf(rs.getInt(1));
                vo.setExamen(rs.getString(2));
                vo.setCedulapaciente(rs.getString(3));
                vo.setUsuario(rs.getString(4));
                vo.setFecha(rs.getString(5));
                vo.setArchivopdf(rs.getBytes(6));
                vo.setState(rs.getString(7));
                vo.setCorreo(rs.getString(8));
                list.add(vo);
            }
        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        } finally {
            try {
                ps.close();
                rs.close();
                cn.desconectar();
            } catch (Exception ex) { System.out.println(ex);
            }
        }
        return list;
    }

    
    public ArrayList<PdfVO> ListarbyCode_PdfVO() {
       
         Connection con;
    EnlaceBd cn = new EnlaceBd();
    PreparedStatement ps=null;
    ResultSet rs=null;
        
        ArrayList<PdfVO> list = new ArrayList<PdfVO>();
   
        String sql = "SELECT Codigopdf, Estudio, Cedula, Usuario, FechaReporte, Reportepdf, Estado, Correo \n" +
"FROM table_laboratorio u\n" +
"\n" +
"INNER JOIN table_estudios n\n" +
"ON u.Id_examen=n.IdEstudio\n" +
"\n" +
"INNER JOIN table_paciente c\n" +
"ON u.id_paciente=c.Idpaciente\n" +
"\n" +
"INNER JOIN table_estado l\n" +
"ON u.Id_Estado=l.IdEstado\n" +
"\n" +
                
"INNER JOIN table_usuario x\n" +
"ON u.Id_personal=x.IdPersonal where Codigopdf LIKE '%" + jTextField1.getText() + "%' " +"ORDER BY  Codigopdf ASC";
   
        try {
            
            con = cn.getConnection();
            ps = con.prepareStatement(sql);
            rs = ps.executeQuery();
            
            
            while (rs.next()) {
                PdfVO vo = new PdfVO();
                vo.setCodigopdf(rs.getInt(1));
                vo.setExamen(rs.getString(2));
                vo.setCedulapaciente(rs.getString(3));
                vo.setUsuario(rs.getString(4));
                vo.setFecha(rs.getString(5));
                vo.setArchivopdf(rs.getBytes(6));
                vo.setState(rs.getString(7));
                vo.setCorreo(rs.getString(8));
                list.add(vo);
            }
            
          
        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        } finally {
            try {
                ps.close();
                rs.close();
                cn.desconectar();
            } catch (Exception ex) { System.out.println(ex);
            }
        }
        return list;
    }
    
    
    
    
    
    
       
    public ArrayList<PdfVO> ListarBetween_PdfVO() {
       
        
        
        
    String fecha = new SimpleDateFormat("yyyy-MM-dd").format(FechaOne.getDate());
    String fecha2 = new SimpleDateFormat("yyyy-MM-dd").format(FechaTwo.getDate());
        
        
        
    Connection con;
    EnlaceBd cn = new EnlaceBd();
    PreparedStatement ps=null;
    ResultSet rs=null;
       
    
ArrayList<PdfVO> list = new ArrayList<PdfVO>();
String sql = "SELECT Codigopdf, Estudio, Cedula, Usuario, FechaReporte, Reportepdf, Estado, Correo \n" +
"FROM table_laboratorio u\n" +
"\n" +
"INNER JOIN table_estudios n\n" +
"ON u.Id_examen=n.IdEstudio\n" +
"\n" +
"INNER JOIN table_paciente c\n" +
"ON u.id_paciente=c.Idpaciente\n" +
"\n" +
"INNER JOIN table_estado l\n" +
"ON u.Id_Estado=l.IdEstado\n" +
"\n" +
"INNER JOIN table_usuario x\n" +
"ON u.Id_personal=x.IdPersonal WHERE FechaReporte BETWEEN " + '"' + fecha + '"' + "AND"  + '"' + fecha2 + '"' +"ORDER BY  Codigopdf ASC";
        
   
        try {
            
            con = cn.getConnection();
            ps = con.prepareStatement(sql);
            rs = ps.executeQuery();
            
            
            while (rs.next()) {
                PdfVO vo = new PdfVO();
                vo.setCodigopdf(rs.getInt(1));
                vo.setExamen(rs.getString(2));
                vo.setCedulapaciente(rs.getString(3));
                vo.setUsuario(rs.getString(4));
                vo.setFecha(rs.getString(5));
                vo.setArchivopdf(rs.getBytes(6));
                vo.setState(rs.getString(7));
                vo.setCorreo(rs.getString(8));
                list.add(vo);
            }
            
          
            
        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        } finally {
            try {
                ps.close();
                rs.close();
                cn.desconectar();
            } catch (Exception ex) { System.out.println(ex);
            }
        }
        return list;
    }
    
    
    
    
    
     public void grafico()
    {
          
        
    String fecha = new SimpleDateFormat("yyyy-MM-dd").format(FechaOne.getDate());
    String fecha2 = new SimpleDateFormat("yyyy-MM-dd").format(FechaTwo.getDate());
        

        
    Connection con;
    EnlaceBd cn = new EnlaceBd();
    PreparedStatement ps=null;
    ResultSet rs=null;
    
        
try {
String sql = "SELECT FechaReporte,  n.Estudio, a.Id_examen, COUNT(*) AS num\n" +
" FROM table_laboratorio AS a \n" +
" \n" +
"INNER JOIN table_estudios n\n" +
"ON a.Id_examen=n.IdEstudio\n" +
" \n" +
"WHERE FechaReporte BETWEEN " + '"' + fecha + '"' + "AND"  + '"' + fecha2 + '"' +"GROUP BY a.Id_examen";                  
                    
                    
            
            
            
         con = cn.getConnection();
         ps = con.prepareStatement(sql);
         rs = ps.executeQuery();
         DateTimeFormatter fth = DateTimeFormatter.ofLocalizedDate(FormatStyle.FULL).ofPattern("dd-MM-yyyy--HH-mm");
         LocalDateTime fechaactual = LocalDateTime.now().truncatedTo(ChronoUnit.MINUTES);
          

      
           
         DefaultPieDataset dateset = new DefaultPieDataset();
         while(rs.next()){
                
         String idexamen= rs.getString("Estudio");
         String nomProduct= rs.getString("num");
            
            
                
                
                
             dateset.setValue( rs.getString("Estudio") , rs.getInt("num") );
            }
            JFreeChart jf = ChartFactory.createPieChart("R E P O R T E     E S T U D I O S" + "\n\nEMITIDO EL "+fechaactual+" "+MP.jLabel102.getText(), dateset);
            ChartFrame f = new ChartFrame("GRAFICO LABORATORIO", jf);
            f.setSize(1000, 500);
            f.setLocationRelativeTo(null);
            f.setVisible(true);
        }
          catch (SQLException e) {
            System.out.println(e.toString());
        }
        
        
        
    }
     
     

    
    
    
    
    
    
    
    
    
    
   String  empresa, rif, ubicacion, telefonos, piepagina;
   public void informacionpdf() {

   Connection con=null;
   EnlaceBd cn = new EnlaceBd();
   PreparedStatement ps=null;
   ResultSet rs=null;
   
        try {

            String sql = "select * from tableinfopdfs";

            con = cn.getConnection();
            ps = con.prepareStatement(sql);
            rs = ps.executeQuery();
            if (rs.next()) {
                empresa = rs.getString("nombrempresa");
                rif = rs.getString("rif");
                ubicacion = rs.getString("ubicacion");
                telefonos = rs.getString("telefonos");
                piepagina = rs.getString("infopiepagina");
               
            }

        } catch (Exception e) {System.out.println(e);
        }  
    }
    
    
    
    
     public void pdf() {
      try {
            
      /*-------------------------------------------------------------------------------------*/
      /* System.out.println("Hoy es :"+dia_actual+" "+ mes_actual+" "+an_actual);*/
      /*      
                
         System.out.println("Fecha de nacimiento :"+dia1+" "+ mes1+" "+an1);
           
            
            
         System.out.println("Dia" +dia_actual+"- " +dia1 +" ="+diferenciadia);
         System.out.println("Mes" +mes_actual+"- " +mes1 +"= "+diferenciames);  
         System.out.println("Año" +an_actual+"- " +an1 +"= "+diferencian);   
            
            
         System.out.println("Tu cumpleaños es :"+diferenciadia+" "+ diferenciames+" "+diferencian); */
 
          
          
          
         DateTimeFormatter fth = DateTimeFormatter.ofLocalizedDate(FormatStyle.FULL).ofPattern("dd-MM-yyyy--HH-mm");
         LocalDateTime fechaactual = LocalDateTime.now().truncatedTo(ChronoUnit.MINUTES);
          

         
 
    
        
                   
            String   PdfNames="ReporteLaboratorio"+"_"+fth.format(fechaactual); 
            BaseFont BF = BaseFont.createFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);    
            Font Letra = new Font(BF); 
            Paragraph saltolinea = new Paragraph();
            saltolinea.add("\n");

            FileOutputStream archivo;
            File file = new File("C://Fundaginebra//Reportes//"+PdfNames+".pdf");
            archivo = new FileOutputStream(file);
            Document doc = new Document();
            PdfWriter writer=  PdfWriter.getInstance(doc, archivo);
            doc.open();
            
            com.itextpdf.text.Image header = com.itextpdf.text.Image.getInstance("C:\\Fundaginebra\\src\\imagenes\\Fundacionlogo1.png");
            header.setAlignment(Chunk.ALIGN_CENTER);

            Paragraph fecha = new Paragraph();
            Font negrita = new Font(Font.FontFamily.HELVETICA, 10, Font.NORMAL, BaseColor.BLACK);
            fecha.add(Chunk.NEWLINE);
            SimpleDateFormat FormatoFecha = new SimpleDateFormat("dd/MM/yyyy");
            String Fecha = FormatoFecha.format(MP.FechaAdmin.getDate());
            String Hora = MP.Time.getText()+" "+MP.jLabel102.getText();
            //fecha.add( "  Fecha: " + Fecha + "\n" +"  Hora: "+ Hora ) ;

            
            
            PdfPTable Encabezado = new PdfPTable(1);
            Encabezado.setWidthPercentage(25);
            Encabezado.getDefaultCell().setBorder(0);
            float[] ColumnaEncabezado = new float[]{50f};
            Encabezado.setWidths(ColumnaEncabezado);
            Encabezado.setHorizontalAlignment(Element.ALIGN_LEFT);
           // String razon =  "Fundación Convenio de Ginbra I";
           // String riff =   "J-8188418-8";
           // String tlf =    "0000-000000";
           // String dir =    "Centro";
            Encabezado.addCell(header);
           
          
            
            
            
            

            PdfContentByte CB = writer.getDirectContent();  
            BaseFont BF2 = BaseFont.createFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
  
            CB.beginText();
            CB.setFontAndSize(BF2, 12);
            CB.setTextMatrix(220, 800);
            CB.showText(empresa);
            CB.setFontAndSize(BF, 10);
            CB.setTextMatrix(280, 790);
            CB.showText(rif);
            CB.setFontAndSize(BF2, 10);
            CB.setTextMatrix(460, 780);
            CB.showText("FECHA: "+ Fecha);
            
            CB.setFontAndSize(BF2, 10);
            CB.setTextMatrix(460, 770);
            CB.showText("HORA: "+ Hora);
            
            CB.setFontAndSize(BF2, 8);
            CB.setTextMatrix(190, 740);
            CB.showText(ubicacion);
          
            CB.setFontAndSize(BF2, 8);
            CB.setTextMatrix(210, 730);
            CB.showText(telefonos); 
            CB.setTextMatrix(168, 725);
            CB.showText("__________________________________________________________________");
          
            CB.endText();
        
       //BODY 
       
       
        
            //productos
          
            
            
         
            
            
            PdfPTable  tablapro = new PdfPTable(5);
            
            tablapro.setHorizontalAlignment(Element.ALIGN_CENTER);
            tablapro.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            tablapro.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
            
            tablapro.setWidthPercentage(100);  
            float[] medidaCeldas = {1f, 4f, 3f,3f,3f};
            tablapro.setWidths(medidaCeldas);
            tablapro.setHorizontalAlignment(Element.ALIGN_CENTER);
            tablapro.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            
              Paragraph tcolumna1 = new Paragraph("CÓDIGO");
            tcolumna1.getFont().setStyle(Font.BOLD);
            tcolumna1.getFont().setSize(8);        
            tcolumna1.setFont(Letra);
            tcolumna1.setAlignment(Element.ALIGN_CENTER);
            tablapro.addCell(tcolumna1);
        
          
            Paragraph tcolumna2 = new Paragraph("ESTUDIO");
            tcolumna2.getFont().setStyle(Font.BOLD);
            tcolumna2.getFont().setSize(10);        
            tcolumna2.setFont(Letra);
            tcolumna2.setAlignment(Element.ALIGN_CENTER);
            tablapro.addCell(tcolumna2);
        
            Paragraph tcolumna3 = new Paragraph("PACIENTE");
            tcolumna3.getFont().setStyle(Font.BOLD);
            tcolumna3.getFont().setSize(10);        
            tcolumna3.setFont(Letra);
            tcolumna3.setAlignment(Element.ALIGN_CENTER);
            tablapro.addCell(tcolumna3);
            
            Paragraph tcolumna4 = new Paragraph("USUARIO");
            tcolumna4.getFont().setStyle(Font.BOLD);
            tcolumna4.getFont().setSize(10);        
            tcolumna4.setFont(Letra);
            tcolumna4.setAlignment(Element.ALIGN_CENTER);
            tablapro.addCell(tcolumna4);
            
            Paragraph tcolumna5 = new Paragraph("FECHA");
            tcolumna5.getFont().setStyle(Font.BOLD);
            tcolumna5.getFont().setSize(10);        
            tcolumna5.setFont(Letra);
            tcolumna5.setAlignment(Element.ALIGN_CENTER);
            tablapro.addCell(tcolumna5);
            
            

            for (int i = 0; i < Jtabla.getRowCount(); i++) {
               
                String Codigo = Jtabla.getValueAt(i, 0).toString();
                String Examen = Jtabla.getValueAt(i, 1).toString();
                String Paciente = Jtabla.getValueAt(i, 2).toString();
                String Usuario = Jtabla.getValueAt(i, 3).toString(); 
                String FechaR = Jtabla.getValueAt(i, 4).toString(); 
          
        
                tablapro.addCell(new Paragraph(Codigo,FontFactory.getFont("Arial",8,Font.NORMAL))); 
                tablapro.addCell(new Paragraph(Examen,FontFactory.getFont("Arial",8,Font.NORMAL))); 
                tablapro.addCell(new Paragraph(Paciente,FontFactory.getFont("Arial",8,Font.NORMAL))); 
                tablapro.addCell(new Paragraph(Usuario,FontFactory.getFont("Arial",8,Font.NORMAL))); 
                tablapro.addCell(new Paragraph(FechaR,FontFactory.getFont("Arial",8,Font.NORMAL))); 
    
       
            }
            doc.add(Encabezado);
            doc.add(saltolinea);
            doc.add(saltolinea);
            doc.add(tablapro);
         
            
            
   
         
   

         
            //FOOTER
        addFooter(writer);
            
            
            doc.close();
            archivo.close();
            Desktop.getDesktop().open(file);
        } catch (DocumentException | IOException e) {
           System.out.println(e);
           JOptionPane.showMessageDialog(null, "NO SE CONSIGUE LA CARPETA FUNDAGINEBRA EN DISCO C", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }
      
         private void addFooter(PdfWriter writer){
    PdfPTable footer = new PdfPTable(1);
    try {

        
        String User=Tempo.getUser();
        
        
        footer.setWidths(new int[]{100});
        footer.setTotalWidth(527);
        footer.setLockedWidth(false);
        footer.getDefaultCell().setFixedHeight(40);
        footer.getDefaultCell().setBorder(Rectangle.TOP);
        footer.getDefaultCell().setBorderColor(BaseColor.LIGHT_GRAY);

        // add current page count
        footer.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
        footer.addCell(new Phrase(String.format("Emitido por:"+User+"                                             |    www.fundaginebra.org  |                                            "+ writer.getPageNumber()+ " | Pág") , new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.NORMAL, BaseColor.BLACK)));

        // write page
        PdfContentByte canvas = writer.getDirectContent();
        canvas.beginMarkedContentSequence(PdfName.ARTIFACT);
        footer.writeSelectedRows(0, -1, 34, 50, canvas);
        canvas.endMarkedContentSequence();
    } catch(DocumentException de) {
        throw new ExceptionConverter(de);
   
    }
}
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
    public void acomodarceldas()
    {
    
        
        DefaultTableModel Tabla = (DefaultTableModel)Jtabla.getModel();
        DefaultTableCellRenderer Alinear = new DefaultTableCellRenderer();
        Alinear.setHorizontalAlignment(SwingConstants.CENTER);
        

       Jtabla.getColumnModel().getColumn(7).setMaxWidth(0);
       Jtabla.getColumnModel().getColumn(7).setMinWidth(0);
       Jtabla.getColumnModel().getColumn(7).setPreferredWidth(0);
        
        Jtabla.getColumnModel().getColumn(Tabla.findColumn("Código")).setPreferredWidth(30);
        Jtabla.getColumnModel().getColumn(Tabla.findColumn("Examen")).setPreferredWidth(100);
        Jtabla.getColumnModel().getColumn(Tabla.findColumn("Paciente")).setPreferredWidth(80);
        Jtabla.getColumnModel().getColumn(Tabla.findColumn("Usuario encargado")).setPreferredWidth(80);
        Jtabla.getColumnModel().getColumn(Tabla.findColumn("Fecha")).setPreferredWidth(60);
        Jtabla.getColumnModel().getColumn(Tabla.findColumn("Estado")).setPreferredWidth(60);

         
        Jtabla.getColumnModel().getColumn(Tabla.findColumn("Código")).setCellRenderer(Alinear);
        Jtabla.getColumnModel().getColumn(Tabla.findColumn("Examen")).setCellRenderer(Alinear);
        Jtabla.getColumnModel().getColumn(Tabla.findColumn("Paciente")).setCellRenderer(Alinear);;
        Jtabla.getColumnModel().getColumn(Tabla.findColumn("Usuario encargado")).setCellRenderer(Alinear);
        Jtabla.getColumnModel().getColumn(Tabla.findColumn("Fecha")).setCellRenderer(Alinear);
        Jtabla.getColumnModel().getColumn(Tabla.findColumn("Estado")).setCellRenderer(Alinear);
        
       
    
    }
            
            
            
       public void reporte() {

        Workbook book = new XSSFWorkbook();
        Sheet sheet = book.createSheet("REPORTE_LABORATORIO");

       
        try {
            
       
            InputStream is = new FileInputStream("C:\\Fundaginebra\\src\\imagenes\\Fundacionlogo1.png");
            byte[] bytes = IOUtils.toByteArray(is);
            int imgIndex = book.addPicture(bytes, Workbook.PICTURE_TYPE_PNG);
            is.close();

            CreationHelper help = book.getCreationHelper();
            Drawing draw = sheet.createDrawingPatriarch();

            ClientAnchor anchor = help.createClientAnchor();
            anchor.setCol1(0);
            anchor.setRow1(0);
            Picture pict = draw.createPicture(anchor, imgIndex);
            pict.resize(1, 3);
           
          
            CellStyle tituloEstilo = book.createCellStyle();
          //  tituloEstilo.setAlignment(HorizontalAlignment.CENTER);
          //  tituloEstilo.setVerticalAlignment(VerticalAlignment.CENTER);
            org.apache.poi.ss.usermodel.Font fuenteTitulo = book.createFont();
            fuenteTitulo.setFontName("Arial");
            fuenteTitulo.setBold(true);
            fuenteTitulo.setFontHeightInPoints((short) 8);
            tituloEstilo.setFont(fuenteTitulo);
           
            SimpleDateFormat FormatoFecha = new SimpleDateFormat("dd/MM/yyyy");
            String Fecha = FormatoFecha.format(MP.FechaAdmin.getDate());
            
           
            Row filaTitulo3 = sheet.createRow(4);
            Cell celdaTitulo3 = filaTitulo3.createCell(0);
            celdaTitulo3.setCellStyle(tituloEstilo);
            celdaTitulo3.setCellValue("-REPORTE LABORATORIO-");
            
            
            Row filaTitulo = sheet.createRow(5);
            Cell celdaTitulo = filaTitulo.createCell(0);
            celdaTitulo.setCellStyle(tituloEstilo);
            celdaTitulo.setCellValue("Fecha: "+Fecha);
           
     
          sheet.addMergedRegion(new CellRangeAddress(1, 2, 1, 3));

            String[] cabecera = new String[]{"CÓDIGO", "EXAMEN","PACIENTE", "USUARIO ENCARGADO", "FECHA"};

            CellStyle headerStyle = book.createCellStyle();
            headerStyle.setFillForegroundColor(IndexedColors.BLUE.getIndex());
            headerStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            headerStyle.setBorderBottom(BorderStyle.THIN);
            headerStyle.setBorderLeft(BorderStyle.THIN);
            headerStyle.setBorderRight(BorderStyle.THIN);
            headerStyle.setBorderBottom(BorderStyle.THIN);
            headerStyle.setBorderBottom(BorderStyle.THIN);
            headerStyle.setBorderBottom(BorderStyle.THIN);


            org.apache.poi.ss.usermodel.Font font = book.createFont();
            font.setFontName("Arial");
            font.setBold(true);
            font.setColor(IndexedColors.WHITE.getIndex());
            font.setFontHeightInPoints((short) 10);
            headerStyle.setFont(font);

            Row filaEncabezados = sheet.createRow(7);

            for (int i = 0; i < cabecera.length; i++) {
                Cell celdaEnzabezado = filaEncabezados.createCell(i);
                celdaEnzabezado.setCellStyle(headerStyle);
                celdaEnzabezado.setCellValue(cabecera[i]);
            }

                   
    EnlaceBd cn = new EnlaceBd();
    PreparedStatement ps=null;
    ResultSet rs=null;
    Connection conn = cn.getConnection();

            int numFilaDatos = 8;

            CellStyle datosEstilo = book.createCellStyle();
            datosEstilo.setBorderBottom(BorderStyle.THIN);
            datosEstilo.setBorderLeft(BorderStyle.THIN);
            datosEstilo.setBorderRight(BorderStyle.THIN);
            datosEstilo.setBorderBottom(BorderStyle.THIN);
            datosEstilo.setBorderBottom(BorderStyle.THIN);
            datosEstilo.setBorderBottom(BorderStyle.THIN);

            

            ps = conn.prepareStatement("SELECT Codigopdf, Estudio, Cedula, Usuario, FechaReporte \n" +
"FROM table_laboratorio u\n" +
"\n" +
"INNER JOIN table_estudios n\n" +
"ON u.Id_examen=n.IdEstudio\n" +
"\n" +
"INNER JOIN table_paciente c\n" +
"ON u.id_paciente=c.Idpaciente\n" +
"\n" +
"INNER JOIN table_usuario x\n" +
"ON u.Id_personal=x.IdPersonal");
            
            rs = ps.executeQuery();

            int numCol = rs.getMetaData().getColumnCount();

            while (rs.next()) {
                Row filaDatos = sheet.createRow(numFilaDatos);

                for (int a = 0; a < numCol; a++) {

                    Cell CeldaDatos = filaDatos.createCell(a);
                    CeldaDatos.setCellStyle(datosEstilo);
                    CeldaDatos.setCellValue(rs.getString(a + 1));
                }


                numFilaDatos++;
            }
            sheet.autoSizeColumn(0);
            sheet.autoSizeColumn(1);
            sheet.autoSizeColumn(2);
            sheet.autoSizeColumn(3);
            sheet.autoSizeColumn(4);
            sheet.autoSizeColumn(5);

            
            sheet.setZoom(150);
            String fileName = "LABORATORIO";
            String home = System.getProperty("user.home");
            File file = new File(home + "/Downloads/" + fileName + ".xlsx");
            FileOutputStream fileOut = new FileOutputStream(file);
            book.write(fileOut);
            fileOut.close();
            Desktop.getDesktop().open(file);
            JOptionPane.showMessageDialog(null, "REPORTE GENERADO","REPORTE",1);

        } catch (FileNotFoundException ex) {
               System.out.println(ex); System.out.println(ex);
        } catch (IOException | SQLException ex) {
               System.out.println(ex);
        }

    }
            
            
             
          public void AuditoriaReporte(){
            
   int idusuario=Tempo.getTexto();        
   Connection con=null;
   EnlaceBd cn = new EnlaceBd();
   PreparedStatement ps=null;
   ResultSet rs=null;
             try {
            
            String Fecha = new SimpleDateFormat("dd/MM/yyyy").format(MP.FechaAdmin.getDate());
           
            String sql = "INSERT INTO table_auditoria (IdUsuario, IdPersonal, Accion,FechaMov) values (?,?,?,?)";
            String accion= "Genero un reporte de la tabla laboratorio " ;
            con = cn.getConnection();
            ps = con.prepareStatement(sql);
            ps.setInt(1,  idusuario);
            ps.setInt(2,  idusuario);
            ps.setString(3,accion);
            ps.setString(4,Fecha);

             ps.executeUpdate();

            
        } catch (Exception e) {System.out.println(e);}
       finally {
            try {
                ps.close();
                cn.desconectar();
            } catch (Exception ex) { System.out.println(ex); }
           
        
    }
     
    }
    
          
          
                   
          public void AuditoriaAutorizar(){
            
   int idusuario=Tempo.getTexto();        
   Connection con=null;
   EnlaceBd cn = new EnlaceBd();
   PreparedStatement ps=null;
   ResultSet rs=null;
             try {
            
            String Fecha = new SimpleDateFormat("dd/MM/yyyy").format(MP.FechaAdmin.getDate());
           
            String sql = "INSERT INTO table_auditoria (IdUsuario, IdPersonal, Accion,FechaMov) values (?,?,?,?)";
            String accion= "Autorizo el reporte del paciente: "+ nombrepaciente;
            con = cn.getConnection();
            ps = con.prepareStatement(sql);
            ps.setInt(1,  idusuario);
            ps.setInt(2,  idusuario);
            ps.setString(3,accion);
            ps.setString(4,Fecha);

             ps.executeUpdate();

            
        } catch (Exception e) {System.out.println(e);}
       finally {
            try {
                ps.close();
                cn.desconectar();
            } catch (Exception ex) { System.out.println(ex); }
           
        
    }
     
    }
          
          
          
          
                   
          public void AuditoriaCancelar(){
            
   int idusuario=Tempo.getTexto();        
   Connection con=null;
   EnlaceBd cn = new EnlaceBd();
   PreparedStatement ps=null;
   ResultSet rs=null;
             try {
            
            String Fecha = new SimpleDateFormat("dd/MM/yyyy").format(MP.FechaAdmin.getDate());
           
            String sql = "INSERT INTO table_auditoria (IdUsuario, IdPersonal, Accion,FechaMov) values (?,?,?,?)";
             String accion= "Cancelo el reporte del paciente: "+ nombrepaciente;
            con = cn.getConnection();
            ps = con.prepareStatement(sql);
            ps.setInt(1,  idusuario);
            ps.setInt(2,  idusuario);
            ps.setString(3,accion);
            ps.setString(4,Fecha);

             ps.executeUpdate();

            
        } catch (Exception e) {System.out.println(e);}
       finally {
            try {
                ps.close();
                cn.desconectar();
            } catch (Exception ex) { System.out.println(ex); }
           
        
    }
     
    }
          
          
          
          
            public void AuditoriaCompletar(){
            
   int idusuario=Tempo.getTexto();        
   Connection con=null;
   EnlaceBd cn = new EnlaceBd();
   PreparedStatement ps=null;
   ResultSet rs=null;
             try {
            
            String Fecha = new SimpleDateFormat("dd/MM/yyyy").format(MP.FechaAdmin.getDate());
           
            String sql = "INSERT INTO table_auditoria (IdUsuario, IdPersonal, Accion,FechaMov) values (?,?,?,?)";
            String accion= "Completo el reporte del paciente: "+ nombrepaciente;
            con = cn.getConnection();
            ps = con.prepareStatement(sql);
            ps.setInt(1,  idusuario);
            ps.setInt(2,  idusuario);
            ps.setString(3,accion);
            ps.setString(4,Fecha);

             ps.executeUpdate();

            
        } catch (Exception e) {System.out.println(e);}
       finally {
            try {
                ps.close();
                cn.desconectar();
            } catch (Exception ex) { System.out.println(ex); }
           
        
    }
     
    }
          
          
          
    public void email2()
    {
    String remitente ="CmollcaLab@gmail.com";
    String clave= "cwqpwexuvskzeqic";
    String destino=correopaciente;
    Properties props= new Properties();
    props.put("mail.smtp.host", "smtp.gmail.com");
    props.setProperty("mail.smtp.starttls.enable", "true");
    props.put("mail.smtp.port", "587");
    props.setProperty("mail.smtp.port", "587");
    props.put("mail.smtp.user", remitente);
    props.setProperty("mail.smtp.auth","true");
    props.put("mail.smtp.ssl.trust", "smtp.gmail.com");
    props.put("mail.smtp.ssl.trust", "smtp.gmail.com");
    props.setProperty("mail.smtp.ssl.protocols", "TLSv1.2");
    
    
 //  String PdfNames=nombrepaciente+"_"+idtabla;
    
    Session session = Session.getDefaultInstance(props);
    MimeMessage mensaje = new MimeMessage(session);
    
    try{
    mensaje.addRecipient(Message.RecipientType.TO, new InternetAddress(destino));
    mensaje.setSubject("Resultado analisis Cmollca");
  
    BodyPart parteTexto= new MimeBodyPart();
    parteTexto.setContent("Saludos cordiales, se adjunta el archivo pdf con los resultados de su analisis", "text/html");
    
     
     File file = new File("C://Fundaginebra//dist//correo.pdf");
     BodyPart parteArchivo= new MimeBodyPart();
     parteArchivo.setDataHandler(new DataHandler(new FileDataSource(file)));
     parteArchivo.setFileName("analisis.pdf");
   
    
    MimeMultipart todasLasPartes = new MimeMultipart();
    todasLasPartes.addBodyPart(parteTexto);
    todasLasPartes.addBodyPart(parteArchivo);
    mensaje.setContent(todasLasPartes);
    
    
    Transport transport = session.getTransport("smtp");
    transport.connect("smtp.gmail.com", remitente, clave);
    transport.sendMessage(mensaje, mensaje.getAllRecipients());
    transport.close();
    JOptionPane.showMessageDialog(null,"Correo Enviado a: "+ correopaciente );
    } 
    catch(Exception e)
    {System.out.println(e);
      JOptionPane.showMessageDialog(null,"ERROR AL ENVIAR EL CORREO", "ERROR EN CORREO", JOptionPane.ERROR_MESSAGE);}
    }

          
          
    
            Mprincipal MP = new Mprincipal();
            Temporal Tempo = new Temporal();
            JCambiarState setState = new JCambiarState();
            String correopaciente="";
            String Pnombrecompleto="";


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Autorizar;
    private javax.swing.JMenuItem Cancelar;
    private javax.swing.JMenuItem Completar;
    private javax.swing.JMenuItem Correo;
    public com.toedter.calendar.JDateChooser FechaOne;
    public com.toedter.calendar.JDateChooser FechaTwo;
    private javax.swing.JRadioButton JRpaciente;
    private javax.swing.JTable Jtabla;
    private javax.swing.JPopupMenu State;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JRadioButton jRcodigo;
    private javax.swing.JRadioButton jRusuario;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
