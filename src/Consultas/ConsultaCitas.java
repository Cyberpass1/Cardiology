/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Consultas;

import Clases.AddPdfConsulta;
import Clases.AddPdfConsultaDao;
import Clases.EnlaceBd;
import Clases.PdfDAO1;
import Clases.PdfVO;
import Clases.Temporal;
import Clases.Validar;
import Clases.imgTabla;
import Menu.Mprincipal;
import Procesos.JConsultas;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.ExceptionConverter;
import com.itextpdf.text.Font;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfName;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Desktop;
import java.awt.Image;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.FormatStyle;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Properties;
import javax.activation.DataHandler;
import javax.activation.FileDataSource;
import javax.mail.BodyPart;
import javax.mail.Message;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author FCGinebraI
 */
public class ConsultaCitas extends javax.swing.JInternalFrame {

    /**
    
     */
    public ConsultaCitas() {
        initComponents();
               ((javax.swing.plaf.basic.BasicInternalFrameUI)this.getUI()).setNorthPane(null);
               
               
               informacionpdf();

Calendar Fecha = new GregorianCalendar();
FechaOne.setCalendar(Fecha);
FechaTwo.setCalendar(Fecha);

 String fecha = new SimpleDateFormat("yyyy-MM-dd").format(FechaOne.getDate());
 String fecha2 = new SimpleDateFormat("yyyy-MM-dd").format(FechaTwo.getDate());

 limpiarTVisualizar();  
visualizar_PdfVOHistorias(jTableVisualizarC, fecha, fecha2 );
   jTableVisualizarC.requestFocusInWindow();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Popus = new javax.swing.JPopupMenu();
        sendEmail = new javax.swing.JMenuItem();
        checkHistory = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        FechaOne = new com.toedter.calendar.JDateChooser();
        FechaTwo = new com.toedter.calendar.JDateChooser();
        jButton4 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableVisualizarC = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        sendEmail.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/correo-electronico.png"))); // NOI18N
        sendEmail.setText("Enviar por correo");
        sendEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendEmailActionPerformed(evt);
            }
        });
        Popus.add(sendEmail);

        checkHistory.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/comprobacion.png"))); // NOI18N
        checkHistory.setText("Utilizar esta historia clinica");
        checkHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkHistoryActionPerformed(evt);
            }
        });
        Popus.add(checkHistory);

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(null);
        setMinimumSize(new java.awt.Dimension(1285, 663));
        setPreferredSize(new java.awt.Dimension(1292, 683));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(0, 0, 51));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1300, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 30, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 643, 1300, 30));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTextField1.setText("V-");
        jTextField1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField1KeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField1KeyTyped(evt);
            }
        });
        jPanel2.add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 230, 50));

        FechaOne.setBackground(new java.awt.Color(255, 255, 255));
        FechaOne.setToolTipText("");
        FechaOne.setDateFormatString("yyyy-MM-dd");
        FechaOne.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jPanel2.add(FechaOne, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 20, 170, 50));

        FechaTwo.setBackground(new java.awt.Color(255, 255, 255));
        FechaTwo.setToolTipText("");
        FechaTwo.setDateFormatString("yyyy-MM-dd");
        FechaTwo.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jPanel2.add(FechaTwo, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 20, 170, 50));

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ImgBotones/magnifier-1_icon-icons.com_56924.png"))); // NOI18N
        jButton4.setContentAreaFilled(false);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 20, 70, 50));

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Logos/adobe_pdf_document_14979.png"))); // NOI18N
        jButton2.setContentAreaFilled(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1190, 10, 70, 50));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 40, 1300, 80));

        jTableVisualizarC.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CÃ³digo", "Doctor", "Paciente", "C.I", "Fecha", "Archivo", "Estado", "Correo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, false, false, true, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableVisualizarC.setComponentPopupMenu(Popus);
        jTableVisualizarC.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableVisualizarCMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jTableVisualizarCMouseEntered(evt);
            }
        });
        jScrollPane1.setViewportView(jTableVisualizarC);
        if (jTableVisualizarC.getColumnModel().getColumnCount() > 0) {
            jTableVisualizarC.getColumnModel().getColumn(0).setResizable(false);
            jTableVisualizarC.getColumnModel().getColumn(2).setResizable(false);
            jTableVisualizarC.getColumnModel().getColumn(3).setResizable(false);
            jTableVisualizarC.getColumnModel().getColumn(5).setResizable(false);
            jTableVisualizarC.getColumnModel().getColumn(6).setResizable(false);
        }

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(2, 130, 1280, 500));

        jPanel3.setBackground(new java.awt.Color(0, 0, 51));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Arial Narrow", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Exportar Tabla");
        jPanel3.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1160, 10, -1, -1));

        jLabel2.setFont(new java.awt.Font("Arial Narrow", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("C O N S U L T A S          M Ã D I C A S");
        jPanel3.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 10, -1, -1));

        jLabel3.setFont(new java.awt.Font("Arial Narrow", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Buscar por cÃ©dula:");
        jPanel3.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, -1, -1));

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1290, 50));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyReleased

 Searchbyced();  acomodarConsultasN(); 

    }//GEN-LAST:event_jTextField1KeyReleased

    private void jTextField1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyTyped

         char car = evt.getKeyChar();
        //VERIFICA Y LIMITA COMPOSICION DE LOS DATOS
        if((car=='V' || car=='E' || car =='J' || car=='-' || car>='0' && car<='9' || car==(char)KeyEvent.VK_DELETE))
        {
            String Caracteres = jTextField1.getText();
            //CONTABILIZA LOS CARACTERES
            if(Caracteres.length()==10)
            {
                evt.consume();
            }
        }
        //EVITA EL INGRESO DE OTROS CARACTERES
        else if((car!='V' && car!='E' && car != 'J' && car!='-' || car<'0' || car>'9' || car!=(char)KeyEvent.VK_DELETE))
        {
            evt.consume();
        }
    }//GEN-LAST:event_jTextField1KeyTyped

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

        String fecha = new SimpleDateFormat("yyyy-MM-dd").format(FechaOne.getDate());
        String fecha2 = new SimpleDateFormat("yyyy-MM-dd").format(FechaTwo.getDate());
        limpiarTVisualizar();
        visualizarbyDate(jTableVisualizarC, fecha, fecha2);  

    }//GEN-LAST:event_jButton4ActionPerformed
int  idtablaHistorias;
String correo="", cedpaciente="", estado="";

    private void jTableVisualizarCMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableVisualizarCMouseClicked
          
        jTableVisualizarC.requestFocusInWindow();
        int column = jTableVisualizarC.getColumnModel().getColumnIndexAtX(evt.getX());
        int row = evt.getY() / jTableVisualizarC.getRowHeight();
        JButton boton;
   
                    
                    
                   
                               
         //----------------------------------------------------------------
                               
                               
                               
  
             
             
  
        if (row < jTableVisualizarC.getRowCount() && row >= 0 && column < jTableVisualizarC.getColumnCount() && column >= 0) {
            idtablaHistorias = (int) jTableVisualizarC.getValueAt(row, 0);
            cedpaciente =  jTableVisualizarC.getValueAt(row, 3).toString();
            estado =  jTableVisualizarC.getValueAt(row, 6).toString();
            correo =  jTableVisualizarC.getValueAt(row, 7).toString();
            Object value = jTableVisualizarC.getValueAt(row, column);
        
            
           // System.out.println(correo);
            
        
        if (value instanceof JButton) {
          ((JButton) value).doClick();
          boton = (JButton) value;
         
          
          if (boton.getText().equals("Vacio")) {
                    JOptionPane.showMessageDialog(null, "No hay archivo", "Archivos", 1);
                } 
                
                
                 else {
                       AddPdfConsultaDao pd = new AddPdfConsultaDao();
                    pd.ejecutar_archivoPDFHistorias(idtablaHistorias);
                    try {
                        JOptionPane.showMessageDialog(null,"Abriendo reporte...","Reporte",1);
                        Desktop.getDesktop().open(new File("ConsultaHistoria.pdf"));
                    } catch (Exception ex) {JOptionPane.showMessageDialog(null,ex);}
                }

        }
        

        
        }  
             jTableVisualizarC.requestFocusInWindow();

    }//GEN-LAST:event_jTableVisualizarCMouseClicked

    
    
    
    
    
    
    
    
    
    
    
    
    
    private void sendEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendEmailActionPerformed
          int fila = jTableVisualizarC.getSelectedRow();
        if (fila == -1) {
            JOptionPane.showMessageDialog(this, "Debe selecionar una Fila");
        } 
       
        
        
        else {
            
            try{
             //   limpiarTVisualizar();
             //   visualizar_PdfVOHistorias(jTableVisualizarC);
          
                 
                 
                    PdfDAO1 pd = new PdfDAO1();
                    pd.correo_archivoPDF(idtablaHistorias);
        
                    email2();
                    
                    
        } catch(Exception e){JOptionPane.showMessageDialog(null, "No hay archivo", "Archivos", 1);
                             System.out.println(e);
        
        }
             
           
            
        }
    }//GEN-LAST:event_sendEmailActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
 if(jTableVisualizarC.getRowCount()<=0){  JOptionPane.showMessageDialog(null, "La tabla se encuentra vacia", "TABLA VACIA", JOptionPane.ERROR_MESSAGE); }
       else{ pdf();}




    }//GEN-LAST:event_jButton2ActionPerformed

    private void checkHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkHistoryActionPerformed

        int fila = jTableVisualizarC.getSelectedRow();
        if (fila == -1) {
            JOptionPane.showMessageDialog(this, "Debe Seleccionar una Fila");
        } else {
        
         try{
              enviarDatos();
            }catch(Exception e){
            JOptionPane.showMessageDialog(this, "ESTA HISTORIA CLINICA NO CUENTA CON UN GUARDADO PREVIO", "HISTORIA", 1);
            System.out.println(e);
            jTableVisualizarC.requestFocusInWindow();
            } 

        
         } 

        jTableVisualizarC.requestFocusInWindow();
    }//GEN-LAST:event_checkHistoryActionPerformed

    private void jTableVisualizarCMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableVisualizarCMouseEntered
  jTableVisualizarC.requestFocusInWindow();
    }//GEN-LAST:event_jTableVisualizarCMouseEntered

    
    
   
    public void enviarDatos(){
    
      try{
       Mprincipal MP = (Mprincipal) SwingUtilities.getWindowAncestor(this);
       MP.JMenu.setSelectedIndex(0);
       dispose();
 
       MP.JMenu.setSelectedIndex(1);
       JConsultas consultas = new JConsultas();
       MP.JDesktopMenu.setVisible(true);
       MP.JDesktopMenu.add(consultas);
       consultas.setClosable(true);
       consultas.setIconifiable(true);
       
        try {
            consultas.setMaximum(true);
        } catch (Exception e) {
        }
        consultas.toFront();
        consultas.setVisible(true);
       
  
        
       
        consultas.TXTPcedula.setText(cedpaciente);
        consultas.idCallestudios=idtablaHistorias;
        consultas.estadoEstudio=estado;
    
        
        consultas.Callpacient();
        consultas.MostrarFGeneral();
        consultas.mostrarFisico();
        consultas.mostrarElectro();
        consultas.mostrarRevision();
        consultas.mostrarFactor();
        consultas.mostrarLab();
        consultas.mostrarRayos();
        consultas.mostrarConclusion();     
        consultas.limpiarShowAntc1();
        consultas.limpiarShowAntc2();
        consultas.ShowAntc1(idtablaHistorias);
        consultas.ShowAntc2(idtablaHistorias);
      }
      catch(Exception e){
      jTableVisualizarC.requestFocusInWindow();
      System.out.println(e);
      }
    
    }
  
    
    
    
    
    
    
    
     
       public void visualizar_PdfVOHistorias(JTable tabla, String fecha1, String fecha2) {
        
        
        try {
        
        
        tabla.setDefaultRenderer(Object.class, new imgTabla());
        DefaultTableModel dt = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        

        
        dt.addColumn("CÃ³digo");
        dt.addColumn("Doctor");
        dt.addColumn("Paciente");
        dt.addColumn("C.I");
        dt.addColumn("Fecha");
        dt.addColumn("Archivo");
        dt.addColumn("Estado");
        dt.addColumn("Correo");
        
        ImageIcon icono = null;
        if (get_Image("/Logos/32pdf.png") != null) {
            icono = new ImageIcon(get_Image("/Logos/32pdf.png"));
        }


    
        AddPdfConsulta vo = new AddPdfConsulta();
        ArrayList<AddPdfConsulta> list = consDao.Listar_PdfVOHistorias(jTableVisualizarC, fecha1, fecha2);


        
        
        if (list.size() > 0) {
            for (int i = 0; i < list.size(); i++) {
                Object fila[] = new Object[10];
                vo = list.get(i);
                fila[0] = vo.getIdConsulta2();
                fila[1] = vo.getIdUsuario2();
                fila[2] = vo.getNombredoctor2();
                fila[3] = vo.getCedulapaciente();
                fila[4] = vo.getFechaAsignar2();

         
                   
                if (vo.getArchivo2() != null) {
                    fila[5] = new JButton(icono);
                } else {
                    fila[5] = new JButton("Vacio");
                }
                  fila[6] = vo.getEstado();
                  fila[7] = vo.getCorreo();
                
                dt.addRow(fila);
            }
            tabla.setModel(dt);
            tabla.setRowHeight(32);
            acomodarConsultasN();

        }
        

                 } catch (Exception e) { System.out.println(e + "visualizarpdf") ;
        }
           
    }
    

  
       
       
    
          public void visualizarbyced(JTable tabla, String ced) {
        
        
        try {
        
        
        tabla.setDefaultRenderer(Object.class, new imgTabla());
        DefaultTableModel dt = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        

        
        dt.addColumn("CÃ³digo");
        dt.addColumn("Doctor");
        dt.addColumn("Paciente");
        dt.addColumn("C.I");
        dt.addColumn("Fecha");
        dt.addColumn("Archivo");
        dt.addColumn("Estado");
        dt.addColumn("Correo");
        
        ImageIcon icono = null;
        if (get_Image("/Logos/32pdf.png") != null) {
            icono = new ImageIcon(get_Image("/Logos/32pdf.png"));
        }

       
        AddPdfConsulta vo = new AddPdfConsulta();
        ArrayList<AddPdfConsulta> list = consDao.Listar_byced(ced);


        
        
        if (list.size() > 0) {
            for (int i = 0; i < list.size(); i++) {
                Object fila[] = new Object[10];
                vo = list.get(i);
                fila[0] = vo.getIdConsulta2();
                fila[1] = vo.getIdUsuario2();
                fila[2] = vo.getNombredoctor2();
                fila[3] = vo.getCedulapaciente();
                fila[4] = vo.getFechaAsignar2();

         
                   
                if (vo.getArchivo2() != null) {
                    fila[5] = new JButton(icono);
                } else {
                    fila[5] = new JButton("Vacio");
                }
                  fila[6] = vo.getEstado();
                  fila[7] = vo.getCorreo();
                
                dt.addRow(fila);
            }
            tabla.setModel(dt);
            tabla.setRowHeight(32);
            acomodarConsultasN();
            
            
   
        
        }
        

                 } catch (Exception e) { System.out.println(e + "visualizarpdf") ;
        }
           
    }
       
       
       
              public void visualizarbyDate(JTable tabla, String fecha, String fecha2) {
        
        
        try {
        
        
        tabla.setDefaultRenderer(Object.class, new imgTabla());
        DefaultTableModel dt = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        

        
        dt.addColumn("CÃ³digo");
        dt.addColumn("Doctor");
        dt.addColumn("Paciente");
        dt.addColumn("C.I");
        dt.addColumn("Fecha");
        dt.addColumn("Archivo");
        dt.addColumn("Estado");
        dt.addColumn("Correo");
        
        ImageIcon icono = null;
        if (get_Image("/Logos/32pdf.png") != null) {
            icono = new ImageIcon(get_Image("/Logos/32pdf.png"));
        }

       
        AddPdfConsulta vo = new AddPdfConsulta();
        ArrayList<AddPdfConsulta> list = consDao.Listar_byDate(fecha, fecha2);


        
        
        if (list.size() > 0) {
            for (int i = 0; i < list.size(); i++) {
                Object fila[] = new Object[10];
                vo = list.get(i);
                fila[0] = vo.getIdConsulta2();
                fila[1] = vo.getIdUsuario2();
                fila[2] = vo.getNombredoctor2();
                fila[3] = vo.getCedulapaciente();
                fila[4] = vo.getFechaAsignar2();

         
                   
                if (vo.getArchivo2() != null) {
                    fila[5] = new JButton(icono);
                } else {
                    fila[5] = new JButton("Vacio");
                }
                  fila[6] = vo.getEstado();
                  fila[7] = vo.getCorreo();
                
                dt.addRow(fila);
            }
            tabla.setModel(dt);
            tabla.setRowHeight(32);
            acomodarConsultasN();
            
            
   
        
        }
        

                 } catch (Exception e) { System.out.println(e + "visualizarpdf") ;
        }
           
    }
       
          
          
          
          
          
          
          
          
          
          
          
          
          
       
       public void email2()
    {
    String remitente ="cyberiasystemjc@gmail.com";
    String clave= "tbasmzkiofgsqfha";
    String destino=correo;
    Properties props= new Properties();
    props.put("mail.smtp.host", "smtp.gmail.com");
    props.setProperty("mail.smtp.starttls.enable", "true");
    props.put("mail.smtp.port", "587");
    props.setProperty("mail.smtp.port", "587");
    props.put("mail.smtp.user", remitente);
    props.setProperty("mail.smtp.auth","true");
    props.put("mail.smtp.ssl.trust", "smtp.gmail.com");
    props.put("mail.smtp.ssl.trust", "smtp.gmail.com");
    props.setProperty("mail.smtp.ssl.protocols", "TLSv1.2");
    
    
 //  String PdfNames=nombrepaciente+"_"+idtabla;
    
    Session session = Session.getDefaultInstance(props);
    MimeMessage mensaje = new MimeMessage(session);
    
    try{
    mensaje.addRecipient(Message.RecipientType.TO, new InternetAddress(destino));
    mensaje.setSubject("CONSULTA CARDIOLOGIA | UNIDAD CARDIOVASCULAR M&S");
  
    BodyPart parteTexto= new MimeBodyPart();
    parteTexto.setContent("Saludos cordiales, se adjunta el archivo pdf de la consulta cardiologica", "text/html");
    
     
     File file = new File("C://Cyberia//dist//correo.pdf");
     BodyPart parteArchivo= new MimeBodyPart();
     parteArchivo.setDataHandler(new DataHandler(new FileDataSource(file)));
     parteArchivo.setFileName("consulta.pdf");
   
    
    MimeMultipart todasLasPartes = new MimeMultipart();
    todasLasPartes.addBodyPart(parteTexto);
    todasLasPartes.addBodyPart(parteArchivo);
    mensaje.setContent(todasLasPartes);
    
    
    Transport transport = session.getTransport("smtp");
    transport.connect("smtp.gmail.com", remitente, clave);
    transport.sendMessage(mensaje, mensaje.getAllRecipients());
    transport.close();
    JOptionPane.showMessageDialog(null,"Correo Enviado a: "+ correo);
    } 
    catch(Exception e)
    {System.out.println(e);
      JOptionPane.showMessageDialog(null,"ERROR AL ENVIAR EL CORREO", "ERROR EN CORREO", JOptionPane.ERROR_MESSAGE);}
    }

       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       public void acomodarConsultasN()
    {
     
        DefaultTableModel Tabla = (DefaultTableModel)jTableVisualizarC.getModel();
        DefaultTableCellRenderer Alinear = new DefaultTableCellRenderer();
        Alinear.setHorizontalAlignment(SwingConstants.CENTER);
        

       jTableVisualizarC.getColumnModel().getColumn(0).setMaxWidth(0);
       jTableVisualizarC.getColumnModel().getColumn(0).setMinWidth(0);
       jTableVisualizarC.getColumnModel().getColumn(0).setPreferredWidth(0);
        

       jTableVisualizarC.getColumnModel().getColumn(Tabla.findColumn("Doctor")).setPreferredWidth(100);
       jTableVisualizarC.getColumnModel().getColumn(Tabla.findColumn("Paciente")).setPreferredWidth(80);
       jTableVisualizarC.getColumnModel().getColumn(Tabla.findColumn("C.I")).setPreferredWidth(60);
       jTableVisualizarC.getColumnModel().getColumn(Tabla.findColumn("Fecha")).setPreferredWidth(60);
       jTableVisualizarC.getColumnModel().getColumn(Tabla.findColumn("Estado")).setPreferredWidth(20);
       jTableVisualizarC.getColumnModel().getColumn(Tabla.findColumn("Correo")).setPreferredWidth(100);


        jTableVisualizarC.getColumnModel().getColumn(Tabla.findColumn("Doctor")).setCellRenderer(Alinear);
        jTableVisualizarC.getColumnModel().getColumn(Tabla.findColumn("Paciente")).setCellRenderer(Alinear);;
        jTableVisualizarC.getColumnModel().getColumn(Tabla.findColumn("C.I")).setCellRenderer(Alinear);
        jTableVisualizarC.getColumnModel().getColumn(Tabla.findColumn("Fecha")).setCellRenderer(Alinear);
        jTableVisualizarC.getColumnModel().getColumn(Tabla.findColumn("Estado")).setCellRenderer(Alinear);;
        jTableVisualizarC.getColumnModel().getColumn(Tabla.findColumn("Correo")).setCellRenderer(Alinear);


    }
       
       
       
       
       
       
       
            public void pdf() {
      try {
            
      /*-------------------------------------------------------------------------------------*/
      /* System.out.println("Hoy es :"+dia_actual+" "+ mes_actual+" "+an_actual);*/
      /*      
                
         System.out.println("Fecha de nacimiento :"+dia1+" "+ mes1+" "+an1);
           
            
            
         System.out.println("Dia" +dia_actual+"- " +dia1 +" ="+diferenciadia);
         System.out.println("Mes" +mes_actual+"- " +mes1 +"= "+diferenciames);  
         System.out.println("AÃ±o" +an_actual+"- " +an1 +"= "+diferencian);   
            
            
         System.out.println("Tu cumpleaÃ±os es :"+diferenciadia+" "+ diferenciames+" "+diferencian); */
 
          
          
          
         DateTimeFormatter fth = DateTimeFormatter.ofLocalizedDate(FormatStyle.FULL).ofPattern("dd-MM-yyyy--HH-mm");
         LocalDateTime fechaactual = LocalDateTime.now().truncatedTo(ChronoUnit.MINUTES);
          

         
 
    
        
                   
            String   PdfNames="ReporteConsultas"+"_"+fth.format(fechaactual); 
            BaseFont BF = BaseFont.createFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);    
            Font Letra = new Font(BF); 
            Paragraph saltolinea = new Paragraph();
            saltolinea.add("\n");

            FileOutputStream archivo;
            File file = new File("C://Cyberia//Reportes//"+PdfNames+".pdf");
            archivo = new FileOutputStream(file);
            Document doc = new Document();
            PdfWriter writer=  PdfWriter.getInstance(doc, archivo);
            doc.open();
            
            com.itextpdf.text.Image header = com.itextpdf.text.Image.getInstance("C:\\Cyberia\\src\\imagenes\\Fundacionlogo1.png");
            header.setAlignment(Chunk.ALIGN_CENTER);

            Paragraph fecha = new Paragraph();
            Font negrita = new Font(Font.FontFamily.HELVETICA, 10, Font.NORMAL, BaseColor.BLACK);
            fecha.add(Chunk.NEWLINE);
            SimpleDateFormat FormatoFecha = new SimpleDateFormat("dd/MM/yyyy");
            String Fecha = FormatoFecha.format(MP.FechaAdmin.getDate());
            String Hora = MP.Time.getText()+" "+MP.jLabel102.getText();
            //fecha.add( "  Fecha: " + Fecha + "\n" +"  Hora: "+ Hora ) ;

            
            
            PdfPTable Encabezado = new PdfPTable(1);
            Encabezado.setWidthPercentage(25);
            Encabezado.getDefaultCell().setBorder(0);
            float[] ColumnaEncabezado = new float[]{50f};
            Encabezado.setWidths(ColumnaEncabezado);
            Encabezado.setHorizontalAlignment(Element.ALIGN_LEFT);
           // String razon =  "FundaciÃ³n Convenio de Ginbra I";
           // String riff =   "J-8188418-8";
           // String tlf =    "0000-000000";
           // String dir =    "Centro";
            Encabezado.addCell(header);
           
          
            
            
            
            

            PdfContentByte CB = writer.getDirectContent();  
            BaseFont BF2 = BaseFont.createFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
  
            CB.beginText();
            
            CB.setFontAndSize(BF2, 12);
            CB.setTextMatrix(205, 790);
            CB.showText(empresa);
            
            CB.setFontAndSize(BF, 10);
            CB.setTextMatrix(240, 780);
            CB.showText(rif);
            
            CB.setFontAndSize(BF2, 10);
            CB.setTextMatrix(460, 780);
            CB.showText("FECHA: "+ Fecha);
            
            CB.setFontAndSize(BF2, 10);
            CB.setTextMatrix(460, 770);
            CB.showText("HORA: "+ Hora);
            
            CB.setFontAndSize(BF2, 8);
            CB.setTextMatrix(230, 740);
            CB.showText(telefonos);
          
            CB.setFontAndSize(BF2, 8);
            CB.setTextMatrix(160, 730);
            CB.showText(ubicacion); 
            CB.setTextMatrix(168, 725);
            CB.showText("__________________________________________________________________");
          
            CB.endText();
        
       //BODY 
       
       
        
            //productos
          
            
            
         
            
            
            PdfPTable  tablapro = new PdfPTable(5);
            
            tablapro.setHorizontalAlignment(Element.ALIGN_CENTER);
            tablapro.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            tablapro.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
            
            tablapro.setWidthPercentage(100);  
            float[] medidaCeldas = {1f, 4f, 3f,3f,3f};
            tablapro.setWidths(medidaCeldas);
            tablapro.setHorizontalAlignment(Element.ALIGN_CENTER);
            tablapro.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
            
            Paragraph tcolumna1 = new Paragraph("CÃDIGO");
            tcolumna1.getFont().setStyle(Font.BOLD);
            tcolumna1.getFont().setSize(8);        
            tcolumna1.setFont(Letra);
            tcolumna1.setAlignment(Element.ALIGN_CENTER);
            tablapro.addCell(tcolumna1);
        
          
            Paragraph tcolumna2 = new Paragraph("DOCTOR");
            tcolumna2.getFont().setStyle(Font.BOLD);
            tcolumna2.getFont().setSize(10);        
            tcolumna2.setFont(Letra);
            tcolumna2.setAlignment(Element.ALIGN_CENTER);
            tablapro.addCell(tcolumna2);
        
            Paragraph tcolumna3 = new Paragraph("PACIENTE");
            tcolumna3.getFont().setStyle(Font.BOLD);
            tcolumna3.getFont().setSize(10);        
            tcolumna3.setFont(Letra);
            tcolumna3.setAlignment(Element.ALIGN_CENTER);
            tablapro.addCell(tcolumna3);
            
            Paragraph tcolumna4 = new Paragraph("FECHA");
            tcolumna4.getFont().setStyle(Font.BOLD);
            tcolumna4.getFont().setSize(10);        
            tcolumna4.setFont(Letra);
            tcolumna4.setAlignment(Element.ALIGN_CENTER);
            tablapro.addCell(tcolumna4);
            
            Paragraph tcolumna5 = new Paragraph("CORREO");
            tcolumna5.getFont().setStyle(Font.BOLD);
            tcolumna5.getFont().setSize(10);        
            tcolumna5.setFont(Letra);
            tcolumna5.setAlignment(Element.ALIGN_CENTER);
            tablapro.addCell(tcolumna5);
            
            

            for (int i = 0; i < jTableVisualizarC.getRowCount(); i++) {
               
                String Codigo = jTableVisualizarC.getValueAt(i, 0).toString();
                String Doctor = jTableVisualizarC.getValueAt(i, 1).toString();
                String Paciente = jTableVisualizarC.getValueAt(i, 2).toString();
                String FechaC = jTableVisualizarC.getValueAt(i, 4).toString(); 
                String Correo = jTableVisualizarC.getValueAt(i, 7).toString(); 
          
        
                tablapro.addCell(new Paragraph(Codigo,FontFactory.getFont("Arial",8,Font.NORMAL))); 
                tablapro.addCell(new Paragraph(Doctor,FontFactory.getFont("Arial",8,Font.NORMAL))); 
                tablapro.addCell(new Paragraph(Paciente,FontFactory.getFont("Arial",8,Font.NORMAL))); 
                tablapro.addCell(new Paragraph(FechaC,FontFactory.getFont("Arial",8,Font.NORMAL))); 
                tablapro.addCell(new Paragraph(Correo,FontFactory.getFont("Arial",8,Font.NORMAL))); 
    
       
            }
            doc.add(Encabezado);
            doc.add(saltolinea);
            doc.add(saltolinea);
            doc.add(tablapro);
         
            
            
   
         
   

         
            //FOOTER
        addFooter(writer);
            
            
            doc.close();
            archivo.close();
            Desktop.getDesktop().open(file);
        } catch (DocumentException | IOException e) {
           System.out.println(e);
           JOptionPane.showMessageDialog(null, "NO SE CONSIGUE LA CARPETA FUNDAGINEBRA EN DISCO C", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }
      
       
       
            
              private void addFooter(PdfWriter writer){
    PdfPTable footer = new PdfPTable(1);
    try {

        
        String User=Tempo.getUser();
        
        
        footer.setWidths(new int[]{100});
        footer.setTotalWidth(527);
        footer.setLockedWidth(false);
        footer.getDefaultCell().setFixedHeight(40);
        footer.getDefaultCell().setBorder(Rectangle.TOP);
        footer.getDefaultCell().setBorderColor(BaseColor.LIGHT_GRAY);

        // add current page count
        footer.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
        footer.addCell(new Phrase(String.format("Emitido por:"+User+"                                                                                                     "+ writer.getPageNumber()+ " | PÃ¡g") , new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.NORMAL, BaseColor.BLACK)));

        // write page
        PdfContentByte canvas = writer.getDirectContent();
        canvas.beginMarkedContentSequence(PdfName.ARTIFACT);
        footer.writeSelectedRows(0, -1, 34, 50, canvas);
        canvas.endMarkedContentSequence();
    } catch(DocumentException de) {
        throw new ExceptionConverter(de);
   
    }
}
     
            
            
              
              
            
      public void Searchbyced(){
              
   try {
        
        
        jTableVisualizarC.setDefaultRenderer(Object.class, new imgTabla());
        DefaultTableModel dt = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        
 
        
        dt.addColumn("CÃ³digo");
        dt.addColumn("Doctor");
        dt.addColumn("Paciente");
        dt.addColumn("C.I");
        dt.addColumn("Fecha");
        dt.addColumn("Archivo");
        dt.addColumn("Estado");
        dt.addColumn("Correo");
        
        ImageIcon icono = null;
        if (get_Image("/Logos/32pdf.png") != null) {
            icono = new ImageIcon(get_Image("/Logos/32pdf.png"));
        }

    String fecha = new SimpleDateFormat("yyyy-MM-dd").format(FechaOne.getDate());
    String fecha2 = new SimpleDateFormat("yyyy-MM-dd").format(FechaTwo.getDate());
    
        AddPdfConsulta vo = new AddPdfConsulta();
        ArrayList<AddPdfConsulta> list = Listar_byCed(fecha, fecha2);
        limpiarTVisualizar(); 
       if (list.size() > 0) {
            for (int i = 0; i < list.size(); i++) {
                Object fila[] = new Object[10];
                vo = list.get(i);
                fila[0] = vo.getIdConsulta2();
                fila[1] = vo.getIdUsuario2();
                fila[2] = vo.getNombredoctor2();
                fila[3] = vo.getCedulapaciente();
                fila[4] = vo.getFechaAsignar2();

         
                   
                if (vo.getArchivo2() != null) {
                    fila[5] = new JButton(icono);
                } else {
                    fila[5] = new JButton("Vacio");
                }
                  fila[6] = vo.getEstado();
                  fila[7] = vo.getCorreo();
                
                dt.addRow(fila);
            }
            jTableVisualizarC.setModel(dt);
            jTableVisualizarC.setRowHeight(32);
            acomodarConsultasN();

        }
        
                 } catch (Exception e) { System.out.println(e);
        }


  }
    
    
    
      
    public ArrayList<AddPdfConsulta> Listar_byCed( String fecha1, String fecha2) {
    Connection con;
    EnlaceBd cn = new EnlaceBd();
    PreparedStatement ps = null;
    ResultSet rs = null;

    ArrayList<AddPdfConsulta> list = new ArrayList<AddPdfConsulta>();

    
    
    String sql = "SELECT Id_historias, Usuario, Id_pacienteh, Nombre, Apellido, Cedula, Correo, Fecha_Historia, Archivo_Historia, Id_Estadoh, Estado " +
                 "FROM table_historias u " +
                 "INNER JOIN table_estado l ON u.Id_Estadoh = l.IdEstado " +
                 "INNER JOIN table_usuario x ON u.Id_usuarioh = x.IdPersonal " +
                 "INNER JOIN table_paciente p ON u.Id_pacienteh = p.Idpaciente " +
                 "WHERE  Cedula LIKE '%" + jTextField1.getText() + "%' " +
                 "AND Fecha_Historia BETWEEN ? AND ? " +
                 "ORDER BY Id_historias ASC";

    
    
    try {
        con = cn.getConnection();
        ps = con.prepareStatement(sql);
        ps.setString(1, fecha1);
        ps.setString(2, fecha2);
        rs = ps.executeQuery();

        while (rs.next()) {
            int estado = rs.getInt("Id_Estadoh");
            if (estado == 103) {
                AddPdfConsulta vo = new AddPdfConsulta();
                vo.setIdConsulta2(rs.getInt(1));
                vo.setIdUsuario2(rs.getString(2));
                vo.setIdPacientes2(rs.getInt(3));
                vo.setNombredoctor2(rs.getString(4) + " " + rs.getString(5));
                vo.setCedulapaciente(rs.getString(6));
                vo.setCorreo(rs.getString(7));
                vo.setFechaAsignar2(rs.getString(8));
                vo.setArchivo2(rs.getBytes(9));
                vo.setEstado(rs.getString(11));
                list.add(vo);
            }
        }
    } catch (SQLException ex) {
        ex.printStackTrace();
    } finally {
        try {
            if (ps != null) {
                ps.close();
            }
            if (rs != null) {
                rs.close();
            }
            cn.desconectar();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
    return list;
}
    
            
     
      
      
            
            
            
            

      
      
    
       public Image get_Image(String ruta) {
        try {
            ImageIcon imageIcon = new ImageIcon(getClass().getResource(ruta));
            Image mainIcon = imageIcon.getImage();
            return mainIcon;
        } catch (Exception e) { System.out.println(e);
        }
        return null;
    }
    
    
    
    
             public  void limpiarTVisualizar() {
        DefaultTableModel tb = (DefaultTableModel) jTableVisualizarC.getModel();
        int a = jTableVisualizarC.getRowCount()-1;
        for (int i = a; i >= 0; i--) {
            tb.removeRow(tb.getRowCount()-1);
        }
    }



       String  empresa, rif, ubicacion, telefonos, piepagina;
   public void informacionpdf() {

   Connection con=null;
   EnlaceBd cn = new EnlaceBd();
   PreparedStatement ps=null;
   ResultSet rs=null;
   
        try {

            String sql = "select * from tableinfopdfs";

            con = cn.getConnection();
            ps = con.prepareStatement(sql);
            rs = ps.executeQuery();
            if (rs.next()) {
                empresa = rs.getString("nombrempresa");
                rif = rs.getString("rif");
                ubicacion = rs.getString("ubicacion");
                telefonos = rs.getString("telefonos");
                piepagina = rs.getString("infopiepagina");
               
            }

        } catch (Exception e) {System.out.println(e);
        }  
    }
    
    
Temporal Tempo = new Temporal();
Mprincipal MP = new Mprincipal();
AddPdfConsultaDao consDao = new   AddPdfConsultaDao ();
Validar va = new Validar();
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public com.toedter.calendar.JDateChooser FechaOne;
    public com.toedter.calendar.JDateChooser FechaTwo;
    private javax.swing.JPopupMenu Popus;
    private javax.swing.JMenuItem checkHistory;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableVisualizarC;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JMenuItem sendEmail;
    // End of variables declaration//GEN-END:variables
}
